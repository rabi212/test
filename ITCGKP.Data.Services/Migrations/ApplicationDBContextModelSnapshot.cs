// <auto-generated />
using System;
using ITCGKP.Data.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ITCGKP.Data.Services.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ITCGKP.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyDetailId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyDetailId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.AccountConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdvCode")
                        .HasColumnType("integer");

                    b.Property<int>("CGSTCode")
                        .HasColumnType("integer");

                    b.Property<int>("CashCode")
                        .HasColumnType("integer");

                    b.Property<int>("CessCode")
                        .HasColumnType("integer");

                    b.Property<int>("CommissionCode")
                        .HasColumnType("integer");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<int>("CreditCode")
                        .HasColumnType("integer");

                    b.Property<int>("DebitCode")
                        .HasColumnType("integer");

                    b.Property<int>("DigitalCode")
                        .HasColumnType("integer");

                    b.Property<int>("DiscAllowed")
                        .HasColumnType("integer");

                    b.Property<int>("DiscCode")
                        .HasColumnType("integer");

                    b.Property<int>("FreightCode")
                        .HasColumnType("integer");

                    b.Property<int>("FreightOut")
                        .HasColumnType("integer");

                    b.Property<int>("IGSTCode")
                        .HasColumnType("integer");

                    b.Property<int>("ProfitCode")
                        .HasColumnType("integer");

                    b.Property<int>("PurCode")
                        .HasColumnType("integer");

                    b.Property<int>("SGSTCode")
                        .HasColumnType("integer");

                    b.Property<int>("SaleCode")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceCode")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceOut")
                        .HasColumnType("integer");

                    b.Property<int>("StockCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("AccountConfigTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.AccountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("EffectGrossProfit")
                        .HasColumnType("boolean");

                    b.Property<string>("HDGCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Ledger_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Nature")
                        .HasColumnType("integer");

                    b.Property<int>("TNo1")
                        .HasColumnType("integer");

                    b.Property<string>("Under_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("HeadGroupTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.ItemBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("BalQty")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("CessPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CompId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal>("MRP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetSaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OnFreeCase")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("ItemCode");

                    b.ToTable("ItemBalanceTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.ItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("CGSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CessPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IGSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("IHSNCode")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ItGPCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ItemGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("SGSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ItemGroupTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.ItemMaster", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("CessPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("IHSNCode")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int?>("ItGPCode")
                        .HasColumnType("integer");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PackId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProdId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ProfitPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ReversCharge")
                        .HasColumnType("integer");

                    b.Property<int>("ShowStock")
                        .HasColumnType("integer");

                    b.Property<int>("UnitCase")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("ItemId");

                    b.HasIndex("ItGPCode");

                    b.HasIndex("PackId");

                    b.HasIndex("ProdId");

                    b.HasIndex("UnitId");

                    b.ToTable("ItemTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.LedgerMaster", b =>
                {
                    b.Property<int>("LedgerMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AcGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AdharNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CloseAc")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CloseAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateOfAnversary")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GSTNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LedCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("LedStateId")
                        .HasColumnType("integer");

                    b.Property<string>("MobileNo1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MobileNo2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("OpnAc")
                        .HasColumnType("integer");

                    b.Property<decimal?>("OpnAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("PanNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PinNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PrintTag")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("LedgerMasterId");

                    b.HasIndex("AcGroupId");

                    b.HasIndex("CompId");

                    b.HasIndex("LedStateId");

                    b.ToTable("HeadTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.OpenItemMaster", b =>
                {
                    b.Property<int>("OpnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OpnDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OpnVNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("OpnId");

                    b.HasIndex("CompId");

                    b.ToTable("OpenItemMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.OpenItemMasterDetail", b =>
                {
                    b.Property<int>("OpnIMDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("CasePcs")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CessAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CessPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CompIdOpnItemMD")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("FreePcs")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("MRP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MRPAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("OpnIMId")
                        .HasColumnType("integer");

                    b.Property<string>("OpnVNoD")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal>("PurAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPcs")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("UnitCase")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCodeOpnItemMD")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("OpnIMDId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("OpnIMId");

                    b.ToTable("OpenItemMasterDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.PackingMaster", b =>
                {
                    b.Property<int>("PackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PackCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("PackId");

                    b.ToTable("PackingTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.ProductCompany", b =>
                {
                    b.Property<int>("ProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ProdCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("ProdId");

                    b.ToTable("ProductCompanyTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.UQCMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("UQCMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.UnitMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("UQCId")
                        .HasColumnType("integer");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("UQCId");

                    b.ToTable("UnitMeasurementTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.AgentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ActiveType")
                        .HasColumnType("boolean");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankAcNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("BasicPay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CCA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("CompIdA")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("EPFAcNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("HRA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<decimal?>("IPAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PinNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal?>("TA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("TransferStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompIdA");

                    b.ToTable("AgentFileTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.AreaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompIdA")
                        .HasColumnType("integer");

                    b.Property<int>("DistId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompIdA");

                    b.HasIndex("DistId");

                    b.ToTable("AreaFileTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.ClientFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ActiveType")
                        .HasColumnType("boolean");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("CompIdA")
                        .HasColumnType("integer");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PinNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("RegPanel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompIdA");

                    b.ToTable("ClientFileTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("DoctorTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.DoctorDetailsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("IPAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IPPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("TestGId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TestGId");

                    b.ToTable("DoctorDetailsMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.DoctorLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("IPAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PrintReport")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("DoctorLabTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.MedMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("PatResultA")
                        .HasColumnType("text");

                    b.Property<string>("PatResultB")
                        .HasColumnType("text");

                    b.Property<string>("RangeDetailsA")
                        .HasColumnType("text");

                    b.Property<string>("RangeDetailsB")
                        .HasColumnType("text");

                    b.Property<string>("TestDetailsA")
                        .HasColumnType("text");

                    b.Property<string>("TestDetailsB")
                        .HasColumnType("text");

                    b.Property<bool>("TestLineA")
                        .HasColumnType("boolean");

                    b.Property<bool>("TestLineB")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("MedMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.MedTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AllergyIssue")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("DateOfIssue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ExamDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("MedPatientType")
                        .HasColumnType("integer");

                    b.Property<string>("MedRemarks")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("OtherIssue")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("PassportNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PatHeight")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("PatWeight")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("PatientMarried")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientReligion")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("PlaceIssue")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("PtId")
                        .HasColumnType("integer");

                    b.Property<string>("RecrutingAgency")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Trade")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("VisaNoDate")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("PtId");

                    b.ToTable("MedTestTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.MedTestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("MedId")
                        .HasColumnType("integer");

                    b.Property<string>("PatResultA")
                        .HasColumnType("text");

                    b.Property<string>("PatResultB")
                        .HasColumnType("text");

                    b.Property<string>("RangeDetailsA")
                        .HasColumnType("text");

                    b.Property<string>("RangeDetailsB")
                        .HasColumnType("text");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<string>("TestDetailsA")
                        .HasColumnType("text");

                    b.Property<string>("TestDetailsB")
                        .HasColumnType("text");

                    b.Property<bool>("TestLineA")
                        .HasColumnType("boolean");

                    b.Property<bool>("TestLineB")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MedId");

                    b.ToTable("MedTestDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PageSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("BarCodePrint")
                        .HasColumnType("boolean");

                    b.Property<bool>("BarcodeTop")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("BottomA")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("BottomB")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("BottomC")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("BottomR")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomOrientationA")
                        .HasColumnType("integer");

                    b.Property<int>("CustomOrientationB")
                        .HasColumnType("integer");

                    b.Property<int>("CustomOrientationC")
                        .HasColumnType("integer");

                    b.Property<int>("CustomOrientationR")
                        .HasColumnType("integer");

                    b.Property<int>("CustomPapersizeA")
                        .HasColumnType("integer");

                    b.Property<int>("CustomPapersizeB")
                        .HasColumnType("integer");

                    b.Property<int>("CustomPapersizeC")
                        .HasColumnType("integer");

                    b.Property<int>("CustomPapersizeR")
                        .HasColumnType("integer");

                    b.Property<string>("FooterPhotoFile")
                        .HasColumnType("text");

                    b.Property<string>("FooterPhotoPath")
                        .HasColumnType("text");

                    b.Property<int?>("FormulaDecimalPlace")
                        .HasColumnType("integer");

                    b.Property<string>("HeaderColor")
                        .HasColumnType("text");

                    b.Property<string>("HeaderDecorate")
                        .HasColumnType("text");

                    b.Property<string>("HeaderDetails")
                        .HasColumnType("text");

                    b.Property<string>("HeaderFont")
                        .HasColumnType("text");

                    b.Property<string>("HeaderPhotoFile")
                        .HasColumnType("text");

                    b.Property<string>("HeaderPhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSecondColor")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSecondDecorate")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSecondDetails")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSecondFont")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSecondSize")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSecondStyle")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSecondWeight")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSize")
                        .HasColumnType("text");

                    b.Property<string>("HeaderStyle")
                        .HasColumnType("text");

                    b.Property<string>("HeaderWeight")
                        .HasColumnType("text");

                    b.Property<decimal?>("LeftA")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("LeftB")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("LeftC")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("LeftR")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("MedReportType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("OnePrintChart")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("PageFooterB")
                        .HasColumnType("text");

                    b.Property<string>("PageHeaderB")
                        .HasColumnType("text");

                    b.Property<decimal?>("PagePrintLine")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("PatientRefNo")
                        .HasColumnType("boolean");

                    b.Property<bool>("PatientRefNoGroupwise")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrintBillOneTwo")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrintFooterB")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrintHeaderB")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrintMedReport")
                        .HasColumnType("boolean");

                    b.Property<bool>("QRCodePrint")
                        .HasColumnType("boolean");

                    b.Property<string>("ReportFooterB")
                        .HasColumnType("text");

                    b.Property<bool>("ReportFooterPrintA")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReportFooterPrintB")
                        .HasColumnType("boolean");

                    b.Property<string>("ReportHeaderColor")
                        .HasColumnType("text");

                    b.Property<string>("ReportHeaderDecorate")
                        .HasColumnType("text");

                    b.Property<string>("ReportHeaderDetails")
                        .HasColumnType("text");

                    b.Property<string>("ReportHeaderFont")
                        .HasColumnType("text");

                    b.Property<string>("ReportHeaderLineHeight")
                        .HasColumnType("text");

                    b.Property<bool>("ReportHeaderPrint")
                        .HasColumnType("boolean");

                    b.Property<string>("ReportHeaderSize")
                        .HasColumnType("text");

                    b.Property<string>("ReportHeaderStyle")
                        .HasColumnType("text");

                    b.Property<string>("ReportHeaderWeight")
                        .HasColumnType("text");

                    b.Property<decimal?>("RightA")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("RightB")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("RightC")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("RightR")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("TestFormulaApply")
                        .HasColumnType("boolean");

                    b.Property<bool>("TestHeaderTop")
                        .HasColumnType("boolean");

                    b.Property<string>("TestLockTypeBColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeBDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeBDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeBFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeBLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeBSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeBStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeBWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeLWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeMWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeNormalWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeRangeWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeSWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeUnnormalWeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYColor")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYDecorate")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYDetails")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYFont")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYLineHeight")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYSize")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYStyle")
                        .HasColumnType("text");

                    b.Property<string>("TestLockTypeYWeight")
                        .HasColumnType("text");

                    b.Property<decimal?>("TopA")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TopB")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TopC")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TopR")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("PageSetupTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AdharNo")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AgeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("AgentAcCode")
                        .HasColumnType("integer");

                    b.Property<string>("ApprovalBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AreaCode")
                        .HasColumnType("integer");

                    b.Property<decimal?>("BalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ClientCode")
                        .HasColumnType("integer");

                    b.Property<string>("CollectedIn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CollectionBoy")
                        .HasColumnType("text");

                    b.Property<decimal?>("CollectionCharge")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("DeliveryBoy")
                        .HasColumnType("text");

                    b.Property<decimal?>("DeliveryCharge")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("DiscountReasion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DiscountType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DispatchColorHold")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("DoctorAcCode")
                        .HasColumnType("integer");

                    b.Property<int?>("DrLabId")
                        .HasColumnType("integer");

                    b.Property<string>("DrName")
                        .HasColumnType("text");

                    b.Property<string>("EditUserCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool>("EmailAuto")
                        .HasColumnType("boolean");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("PaidAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("PatientAreadCodeId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("PrintBill")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RTime")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("ReportApproved")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ReportCancel")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ReportDate")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("ReportDispatch")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ReportHold")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ReportIssue")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ReportRecipt")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ResultDone")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ResultNotDone")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("SDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("STime")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("TestDetailRecord")
                        .HasColumnType("text");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("TotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalIPAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("VNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("AgentAcCode");

                    b.HasIndex("ClientCode");

                    b.HasIndex("CompId");

                    b.HasIndex("DoctorAcCode");

                    b.HasIndex("DrLabId");

                    b.HasIndex("PatientAreadCodeId");

                    b.ToTable("PatientTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("EditUserCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("ModifDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaidPostInformation")
                        .HasColumnType("text");

                    b.Property<string>("PaidPreInformation")
                        .HasColumnType("text");

                    b.Property<int?>("PatId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientInformation")
                        .HasColumnType("text");

                    b.Property<string>("RefNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("SDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("SelectDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateType")
                        .HasColumnType("text");

                    b.Property<string>("UserCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("VNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("PatientAuditTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientDetailsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompIdX")
                        .HasColumnType("integer");

                    b.Property<decimal?>("IPAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IPPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("PrintTest")
                        .HasColumnType("boolean");

                    b.Property<int>("PtIMId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("StanderRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("UserCodeX")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("VNoX")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("PtIMId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientDetailsMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientDiscountMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompIdX")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PtIMId")
                        .HasColumnType("integer");

                    b.Property<int>("TestGId")
                        .HasColumnType("integer");

                    b.Property<string>("UserCodeX")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("VNoX")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("PtIMId");

                    b.HasIndex("TestGId");

                    b.ToTable("PatientDiscountMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientDueRecipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PaidAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PatId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("VDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("PatId");

                    b.ToTable("PatientDueReciptTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientII", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AgeType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("TitleName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("PatientIITable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientInvestigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ColFifth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColFirst")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColFourth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColSecond")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColSixth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColThird")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultResult")
                        .HasColumnType("text");

                    b.Property<int>("FromAge")
                        .HasColumnType("integer");

                    b.Property<string>("FromRange")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Gender")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<decimal?>("MaxRange")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("MiniRange")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("PatResult")
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<bool>("PrintTrueFalse")
                        .HasColumnType("boolean");

                    b.Property<string>("RangeDetails")
                        .HasColumnType("text");

                    b.Property<string>("RangeSymble")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("TempNo")
                        .HasColumnType("integer");

                    b.Property<string>("TestDetails")
                        .HasColumnType("text");

                    b.Property<int?>("TestIdX")
                        .HasColumnType("integer");

                    b.Property<string>("TestLocked")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("TestSubId")
                        .HasColumnType("integer");

                    b.Property<string>("Units")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("UptoAge")
                        .HasColumnType("integer");

                    b.Property<string>("UptoRange")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("VisualTrueFalse")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestIdX");

                    b.HasIndex("TestSubId");

                    b.ToTable("PatientInvestigationTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.ReportGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("TempNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("ReportGroupTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestDocMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TestGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("documentFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestDocMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestGroupMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("IPAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IPPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("TestGroupTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("CCRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ColumnsNo")
                        .HasColumnType("integer");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("GraphsType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<decimal?>("IPAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IPPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PPRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("integer");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TestGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("documentType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("ReportId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("TestMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("TestDetailName")
                        .HasColumnType("text");

                    b.Property<int?>("TestIdX")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("TestResultTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestResultDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PatientValue")
                        .HasColumnType("text");

                    b.Property<int?>("TempNo")
                        .HasColumnType("integer");

                    b.Property<int>("TestResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId");

                    b.ToTable("TestResultDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestSubMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AgeType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ColFifth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColFirst")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColFourth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColSecond")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColSixth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ColThird")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultResult")
                        .HasColumnType("text");

                    b.Property<int>("FromAge")
                        .HasColumnType("integer");

                    b.Property<string>("FromRange")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Gender")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<decimal?>("MaxRange")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("MiniRange")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("RangeDetails")
                        .HasColumnType("text");

                    b.Property<string>("RangeSymble")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("TempNo")
                        .HasColumnType("integer");

                    b.Property<string>("TestDetails")
                        .HasColumnType("text");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("TestLocked")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Units")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("UptoAge")
                        .HasColumnType("integer");

                    b.Property<string>("UptoRange")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("VisualTrueFalse")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("TestId");

                    b.ToTable("TestSubMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.PayBill.UpdatePayBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AdvAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("AdvRemarks")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("AttendDays")
                        .HasColumnType("integer");

                    b.Property<decimal?>("BasicPay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("BonusAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CCA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CompId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("EFP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("EmpId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HRA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IPAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("LIC")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NetPay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NewBasicPay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("TA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalDedPay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalPay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("VDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("EmpId");

                    b.ToTable("PayBillTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.CheckMessageSend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CurrentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustCode")
                        .HasColumnType("integer");

                    b.Property<string>("MessageType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("TodayMessageSend")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CheckMessageSendTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.CompanyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionForm")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("DistId")
                        .HasColumnType("integer");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ExitFooterReport")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GSTNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Jurisdiction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<bool>("PhotoPathPrint")
                        .HasColumnType("boolean");

                    b.Property<string>("PinNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SignaturePhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("SignaturePhotoPathLeft")
                        .HasColumnType("text");

                    b.Property<bool>("SignaturePrint")
                        .HasColumnType("boolean");

                    b.Property<bool>("SignaturePrintLeft")
                        .HasColumnType("boolean");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("TransCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UptoDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DistId");

                    b.HasIndex("StateId");

                    b.ToTable("CompanyDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.District", b =>
                {
                    b.Property<int>("DistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DistStateId")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("DistId");

                    b.HasIndex("DistStateId");

                    b.ToTable("DistrictTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.FontCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FontCustomTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.MoneyMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("APIKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("APISalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AuthKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("FurURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PostURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SurURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("MoneyMasterTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.SMSFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("DateOfInstallment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateOfMaturity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateofAnniversary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dateofbirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.ToTable("SMSFileTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.SMSKey", b =>
                {
                    b.Property<int>("SMSKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("APIKeyNo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<bool>("MessageActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageDetail")
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("URLName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SMSKeyId");

                    b.HasIndex("CompId");

                    b.ToTable("SMSKeyTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("StateId");

                    b.ToTable("StateTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.Titles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TitlesTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.UploadPhotoFront", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UploadPhotoFrontTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.ItemStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("ExpDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal>("MRP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetSaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("OpnPCS")
                        .HasColumnType("integer");

                    b.Property<int>("PurPCS")
                        .HasColumnType("integer");

                    b.Property<decimal>("PurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PurRtPCS")
                        .HasColumnType("integer");

                    b.Property<int>("SalePCS")
                        .HasColumnType("integer");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("SaleRtPCS")
                        .HasColumnType("integer");

                    b.Property<int?>("TempNo")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("VouchDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VouchVNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompId");

                    b.HasIndex("ItemCode");

                    b.ToTable("ItemStockTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Purchase", b =>
                {
                    b.Property<int>("STId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AcCode")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CGSTTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CashAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CessTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("CustAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CustLedStateId")
                        .HasColumnType("integer");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("DigitalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IGSTTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NetAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("OtherAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OtherAmt2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PayMode")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SGSTTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("STDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("STVNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal?>("TotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("STId");

                    b.HasIndex("AcCode");

                    b.HasIndex("CompId");

                    b.ToTable("PurchaseTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseDetail", b =>
                {
                    b.Property<int>("STMDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("CGSTAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CasePcs")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<int>("CompIdSTItemMD")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscAmt2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscAmt3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("ExpDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("FreePcs")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IGSTAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal>("MRP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MRPAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OnFreeCase")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("SGSTAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("STIMId")
                        .HasColumnType("integer");

                    b.Property<string>("STItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("STVNoD")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalDiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalPcs")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("UnitCase")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCodeSTItemMD")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("STMDId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("STIMId");

                    b.ToTable("PurchaseDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseOrder", b =>
                {
                    b.Property<int>("SOId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AcCode")
                        .HasColumnType("integer");

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("CustAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ODate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SOVNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("SOId");

                    b.HasIndex("AcCode");

                    b.HasIndex("CompId");

                    b.ToTable("PurchaseOrderTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("SOMDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("CasePcs")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CompIdSOItemMD")
                        .HasColumnType("integer");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rate")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("SOIMId")
                        .HasColumnType("integer");

                    b.Property<string>("SOVNoD")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("SSItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserCodeSOItemMD")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("SOMDId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("SOIMId");

                    b.ToTable("PurchaseOrderDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseR", b =>
                {
                    b.Property<int>("STId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AcCode")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CGSTTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CashAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CessTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("CustAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CustLedStateId")
                        .HasColumnType("integer");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("DigitalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IGSTTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NetAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OtherAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OtherAmt2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("SGSTTotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("STDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("STVNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal?>("TotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("STId");

                    b.HasIndex("AcCode");

                    b.HasIndex("CompId");

                    b.ToTable("PurchaseRTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseRDetail", b =>
                {
                    b.Property<int>("STMDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("CGSTAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CasePcs")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<int>("CompIdSTItemMD")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscAmt1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscAmt2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscAmt3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("ExpDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("FreePcs")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IGSTAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal>("MRP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MRPAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("OnFreeCase")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("SGSTAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("STIMId")
                        .HasColumnType("integer");

                    b.Property<string>("STItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("STVNoD")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalDiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalPcs")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("UnitCase")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCodeSTItemMD")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("STMDId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("STIMId");

                    b.ToTable("PurchaseRDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Sale", b =>
                {
                    b.Property<int>("SSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CreditAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CustAcCode")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("CustAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NetAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PaidAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("PayMode")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SSVNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal?>("TaxAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("SSId");

                    b.HasIndex("CompId");

                    b.ToTable("SaleTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.SaleDetail", b =>
                {
                    b.Property<int>("SSMDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CompIdSSItemMD")
                        .HasColumnType("integer");

                    b.Property<decimal>("CustSaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("ExpDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal>("MRP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NetTotalAmt")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("Qty")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("SSIMId")
                        .HasColumnType("integer");

                    b.Property<string>("SSItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SSVNoD")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalAmt")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalDiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCodeSSItemMD")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("SSMDId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("SSIMId");

                    b.ToTable("SaleDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.SaleR", b =>
                {
                    b.Property<int>("SRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<string>("CustAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NetAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SRVNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal?>("TaxAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("SRId");

                    b.HasIndex("CompId");

                    b.ToTable("SaleRTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.SaleRDetail", b =>
                {
                    b.Property<int>("SRMDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CompIdSRItemMD")
                        .HasColumnType("integer");

                    b.Property<decimal>("CustSaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DiscPer1")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("ExpDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("GSTPer")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal>("MRP")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetPurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("NetTotalAmt")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PurRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("Qty")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("SRIMId")
                        .HasColumnType("integer");

                    b.Property<string>("SRItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SRVNoD")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalAmt")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalDiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCodeSRItemMD")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("SRMDId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("SRIMId");

                    b.ToTable("SaleRDetailTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Voucher", b =>
                {
                    b.Property<int>("VId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CrAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("DrAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("VDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VVNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("VId");

                    b.HasIndex("CompId");

                    b.ToTable("VoucherTable");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.VoucherDetail", b =>
                {
                    b.Property<int>("VMDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AcCode1")
                        .HasColumnType("integer");

                    b.Property<int?>("AcCode2")
                        .HasColumnType("integer");

                    b.Property<string>("BookType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("CompIdVItemMD")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Cr_Amt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CustAcCode1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("CustAcCode2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<decimal?>("DiscAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("Dr_Amt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("PatientName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RefNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TempSrNo")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalAmt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UserCodeVItemMD")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("VIMId")
                        .HasColumnType("integer");

                    b.Property<string>("VVNoD")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VVType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VoucherPartyName")
                        .HasColumnType("text");

                    b.HasKey("VMDId");

                    b.HasIndex("AcCode1");

                    b.HasIndex("AcCode2");

                    b.HasIndex("VIMId");

                    b.ToTable("VoucherDetailTable");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Master.ClientFile", "ClientFile")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompanyDetailId");

                    b.Navigation("ClientFile");

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.AccountConfig", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.ItemBalance", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDetail");

                    b.Navigation("ItemMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.ItemMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.ItemGroup", "Itemdetails")
                        .WithMany()
                        .HasForeignKey("ItGPCode");

                    b.HasOne("ITCGKP.Data.Models.Financial.PackingMaster", "PackingMaster")
                        .WithMany("ItemMasters")
                        .HasForeignKey("PackId");

                    b.HasOne("ITCGKP.Data.Models.Financial.ProductCompany", "ProductCompany")
                        .WithMany()
                        .HasForeignKey("ProdId");

                    b.HasOne("ITCGKP.Data.Models.Financial.UnitMeasurement", "UnitMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Itemdetails");

                    b.Navigation("PackingMaster");

                    b.Navigation("ProductCompany");

                    b.Navigation("UnitMeasurement");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.LedgerMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.AccountGroup", "AcGPLedger")
                        .WithMany()
                        .HasForeignKey("AcGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompLedger")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Setting.State", "StateLedger")
                        .WithMany()
                        .HasForeignKey("LedStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcGPLedger");

                    b.Navigation("CompLedger");

                    b.Navigation("StateLedger");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.OpenItemMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.OpenItemMasterDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Financial.OpenItemMaster", "OpenItemMaster1")
                        .WithMany("OpenItemMasterDetails")
                        .HasForeignKey("OpnIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMaster");

                    b.Navigation("OpenItemMaster1");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.UnitMeasurement", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.UQCMaster", "UQCMaster")
                        .WithMany()
                        .HasForeignKey("UQCId");

                    b.Navigation("UQCMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.AgentFile", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "AgentCompanyDetails")
                        .WithMany("AgentFilesCompany")
                        .HasForeignKey("CompIdA");

                    b.Navigation("AgentCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.AreaFile", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "AreaCompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompIdA");

                    b.HasOne("ITCGKP.Data.Models.Setting.District", "DistrictDetail")
                        .WithMany()
                        .HasForeignKey("DistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaCompanyDetail");

                    b.Navigation("DistrictDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.ClientFile", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "ClientCompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompIdA");

                    b.Navigation("ClientCompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.Doctor", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "DoctorCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("DoctorCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.DoctorDetailsMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "DoctorDetailsCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Master.Doctor", "Doctor")
                        .WithMany("DoctorDetailsMasters")
                        .HasForeignKey("DoctorId");

                    b.HasOne("ITCGKP.Data.Models.Master.TestGroupMaster", "TestGroupMasters")
                        .WithMany()
                        .HasForeignKey("TestGId");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorDetailsCompanyDetails");

                    b.Navigation("TestGroupMasters");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.DoctorLab", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "DoctorCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("DoctorCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.MedMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "DoctorCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("DoctorCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.MedTest", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "DoctorCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Master.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PtId");

                    b.Navigation("DoctorCompanyDetails");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.MedTestDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Master.MedTest", "MedTest")
                        .WithMany("MedTestDetails")
                        .HasForeignKey("MedId");

                    b.Navigation("MedTest");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PageSetup", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "PageSetupCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("PageSetupCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.Patient", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Master.AgentFile", "PatientAgentAcCode")
                        .WithMany()
                        .HasForeignKey("AgentAcCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Master.ClientFile", "PatientClientCode")
                        .WithMany()
                        .HasForeignKey("ClientCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "PatientCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Financial.LedgerMaster", "PatientDoctorAcCode")
                        .WithMany()
                        .HasForeignKey("DoctorAcCode");

                    b.HasOne("ITCGKP.Data.Models.Master.DoctorLab", "DoctorLab")
                        .WithMany("Patients")
                        .HasForeignKey("DrLabId");

                    b.HasOne("ITCGKP.Data.Models.Master.AreaFile", "PatientAreadCode")
                        .WithMany()
                        .HasForeignKey("PatientAreadCodeId");

                    b.Navigation("DoctorLab");

                    b.Navigation("PatientAgentAcCode");

                    b.Navigation("PatientAreadCode");

                    b.Navigation("PatientClientCode");

                    b.Navigation("PatientCompanyDetails");

                    b.Navigation("PatientDoctorAcCode");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientAudit", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientDetailsMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Master.Patient", "Patient")
                        .WithMany("PatientDetailsMasters")
                        .HasForeignKey("PtIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Master.TestMaster", "TestMaster")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TestMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientDiscountMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Master.Patient", "Patient")
                        .WithMany("PatientDiscountMasters")
                        .HasForeignKey("PtIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Master.TestGroupMaster", "TestGroupMaster")
                        .WithMany()
                        .HasForeignKey("TestGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TestGroupMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientDueRecipt", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Master.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.PatientInvestigation", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "TestSubCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Master.Patient", "Patient")
                        .WithMany("PatientInvestigations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Master.TestMaster", "TestMaster")
                        .WithMany()
                        .HasForeignKey("TestIdX");

                    b.HasOne("ITCGKP.Data.Models.Master.TestSubMaster", "TestSubMaster")
                        .WithMany()
                        .HasForeignKey("TestSubId");

                    b.Navigation("Patient");

                    b.Navigation("TestMaster");

                    b.Navigation("TestSubCompanyDetails");

                    b.Navigation("TestSubMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.ReportGroup", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "ReportGroupCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("ReportGroupCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestDocMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "TestCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Master.TestGroupMaster", "TestGroupMaster")
                        .WithMany()
                        .HasForeignKey("TestGroupId");

                    b.Navigation("TestCompanyDetails");

                    b.Navigation("TestGroupMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestGroupMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "TestGroupCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("TestGroupCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "TestCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Master.ReportGroup", "ReportGroup")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.HasOne("ITCGKP.Data.Models.Master.TestGroupMaster", "TestGroupMaster")
                        .WithMany()
                        .HasForeignKey("TestGroupId");

                    b.Navigation("ReportGroup");

                    b.Navigation("TestCompanyDetails");

                    b.Navigation("TestGroupMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestResult", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestResultDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Master.TestResult", "TestResult")
                        .WithMany("TestResultDetails")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestSubMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "TestSubCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Master.TestMaster", "TestMaster")
                        .WithMany("TestSubMasters")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestMaster");

                    b.Navigation("TestSubCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.PayBill.UpdatePayBill", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Master.AgentFile", "AgentFile")
                        .WithMany("UpdatePayBills")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentFile");

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.CompanyDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.District", "District")
                        .WithMany()
                        .HasForeignKey("DistId");

                    b.HasOne("ITCGKP.Data.Models.Setting.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.District", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.State", "StateDetails")
                        .WithMany("Districts")
                        .HasForeignKey("DistStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.MoneyMaster", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "MoneyCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("MoneyCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.SMSFile", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "SMSFileCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("SMSFileCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.SMSKey", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "SMSKeyCompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("SMSKeyCompanyDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.ItemStock", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDetail");

                    b.Navigation("ItemMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Purchase", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.LedgerMaster", "LedgerMaster")
                        .WithMany()
                        .HasForeignKey("AcCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDetail");

                    b.Navigation("LedgerMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Transaction.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("STIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMaster");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseOrder", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.LedgerMaster", "LedgerMasterSaleOrder")
                        .WithMany()
                        .HasForeignKey("AcCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("CompanyDetail");

                    b.Navigation("LedgerMasterSaleOrder");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseOrderDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Transaction.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("SOIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMaster");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseR", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.LedgerMaster", "LedgerMaster")
                        .WithMany()
                        .HasForeignKey("AcCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyDetail");

                    b.Navigation("LedgerMaster");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseRDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Transaction.PurchaseR", "PurchaseR")
                        .WithMany("PurchaseRDetails")
                        .HasForeignKey("STIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMaster");

                    b.Navigation("PurchaseR");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Sale", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.SaleDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Transaction.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SSIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMaster");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.SaleR", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompanyDetail")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.SaleRDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.Transaction.SaleR", "SaleR")
                        .WithMany("SaleRDetails")
                        .HasForeignKey("SRIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemMaster");

                    b.Navigation("SaleR");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Voucher", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Setting.CompanyDetail", "CompVoucher")
                        .WithMany()
                        .HasForeignKey("CompId");

                    b.Navigation("CompVoucher");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.VoucherDetail", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.Financial.LedgerMaster", "VoucherAcCode1")
                        .WithMany()
                        .HasForeignKey("AcCode1");

                    b.HasOne("ITCGKP.Data.Models.Financial.LedgerMaster", "VoucherAcCode2")
                        .WithMany()
                        .HasForeignKey("AcCode2");

                    b.HasOne("ITCGKP.Data.Models.Transaction.Voucher", "Voucher")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("VIMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voucher");

                    b.Navigation("VoucherAcCode1");

                    b.Navigation("VoucherAcCode2");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITCGKP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ITCGKP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.OpenItemMaster", b =>
                {
                    b.Navigation("OpenItemMasterDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Financial.PackingMaster", b =>
                {
                    b.Navigation("ItemMasters");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.AgentFile", b =>
                {
                    b.Navigation("UpdatePayBills");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.Doctor", b =>
                {
                    b.Navigation("DoctorDetailsMasters");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.DoctorLab", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.MedTest", b =>
                {
                    b.Navigation("MedTestDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.Patient", b =>
                {
                    b.Navigation("PatientDetailsMasters");

                    b.Navigation("PatientDiscountMasters");

                    b.Navigation("PatientInvestigations");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestMaster", b =>
                {
                    b.Navigation("TestSubMasters");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Master.TestResult", b =>
                {
                    b.Navigation("TestResultDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.CompanyDetail", b =>
                {
                    b.Navigation("AgentFilesCompany");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Setting.State", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.PurchaseR", b =>
                {
                    b.Navigation("PurchaseRDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Sale", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.SaleR", b =>
                {
                    b.Navigation("SaleRDetails");
                });

            modelBuilder.Entity("ITCGKP.Data.Models.Transaction.Voucher", b =>
                {
                    b.Navigation("VoucherDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
